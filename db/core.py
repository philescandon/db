# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['sayHello', 'dataset', 'getFieldNames']

# Cell
def sayHello(to):
    'Say hello to anyone'
    return f'Hello {to}'

# Cell
class dataset():
    """ DB110 Data Struct Class containing Data, SensorID, Logfile, Comments
        Instantiate with log file name and sensor id:
        obj = DB110_DATASET('logfile', 01)
        @log - logfile
        @sensor - optional sensor id from dataset

        Class contains these attributes:
            sensorid
            logfile
            cols - shortened field names for plots
            fieldnames - full field name
            data - pandas dataframe
            comments - any pertinent comments on the data


    """
    #constructor
    def __init__(self,log, sensor = []):
        self.sensorid = sensor
        self.logfile = log

        #self.names=getfieldnames(self.logfile)
        fieldnames=getFieldNames(self.logfile)
        #self.fieldnames = fieldnames[2:]
        self.fieldnames = fieldnames
        self.data = pd.read_table(self.logfile,comment = '#',names=self.fieldnames, delim_whitespace=True,skiprows=len(self.fieldnames)+9,index_col = 0)
        self.data.drop('Absolute_sample_number',1,inplace=True)



        self.comments = ''


# Cell
def getFieldNames(logfile):
    nameList = []
    fields = []
    pattern = r'#\s\d*\s(?P<field>\w.*)'
    fieldsRegex = re.compile(pattern,flags=re.IGNORECASE)
    fh = open(logfile,'r')
    lines = fh.readlines(1)
    for line in lines:
        m = fieldsRegex.search(line)
        if m:
            field = m.group('field')
            field = field.replace(' ','_')
            field = field.replace(':','.')
            field = field.replace('.','_')
            nameList.append(field)
        else:
            pass
    fh.close()
    fieldNames = nameList

    # need a dictionary?
    #fieldNames = dict.fromkeys(nameList)

    return fieldNames